;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

      /* THIS IS ALL OBSOLETE STUFF




     /* list of words to search for */
//     val keyWords = List("this")
//     val containsthis1 = unionStreams.flatMap(byteArray => new String(byteArray).split(" ").filter(_=="this"))
//     val containsthis2 = unionStreams.flatMap(byteArray => new String(byteArray).split(" ").filter(_.exists(keyWords contains _)))

//     containsthis1.countByWindow(Seconds(60),batchInterval).print()
//     containsthis2.countByWindow(Seconds(60),batchInterval).print()



     val words = unionStreams.flatMap(byteArray => new String(byteArray).split(" "))

     /* This selects all hashtags */
     val hashTags = unionStreams.flatMap(byteArray => new String(byteArray).split(" ").filter(_.startsWith("#")))


     
     // Most popular hashtags in the last 60 seconds
     val topHashCounts60 = hashTags.map((_, 1)).reduceByKeyAndWindow(_ + _, Seconds(60))
     	              .map{case (topic, count) => (count, topic)}
              	      .transform(_.sortByKey(false))

     // Most popular hashtags in the last 10 seconds
     val topHashCounts10 = hashTags.map((_, 1)).reduceByKeyAndWindow(_ + _, Seconds(60))
     	              .map{case (topic, count) => (count, topic)}
              	      .transform(_.sortByKey(false))

     // Most popular words in the last 60 seconds
     val topWordCounts60 = words.map((_, 1)).reduceByKeyAndWindow(_ + _, Seconds(60))
     	              .map{case (topic, count) => (count, topic)}
              	      .transform(_.sortByKey(false))



      // Print popular hashtags
      topHashCounts60.foreachRDD(rdd => {
      val topList = rdd.take(3)
      println("\nTop 3 topics in last 60 seconds (%s total):".format(rdd.count()))
      topList.foreach{case (count, tag) => println("%s (%s tweets)".format(tag, count))}
      })     

      topHashCounts10.foreachRDD(rdd => {
      val topList = rdd.take(3)
      println("\nTop 3 topics in last 10 seconds (%s total):".format(rdd.count()))
      topList.foreach{case (count, tag) => println("%s (%s tweets)".format(tag, count))}
      })

      topWordCounts60.foreachRDD(rdd => {
      val topList = rdd.take(3)
      println("\nTop 3 words topics in last 60 seconds (%s total):".format(rdd.count()))
      topList.foreach{case (count, tag) => println("%s (%s tweets)".format(tag, count))}
      })
      */
    

//val kv = x.map(e => e._1 -> e._2 -> e._3) // kv is RDD[((String, String), Int)]
//val reduced = kv.reduceByKey(_ + _)       // reduced is RDD[((String, String), Int)]
//val kv2 = reduced.map(e => e._1._1 -> (e._1._2 -> e._2)) // kv2 is RDD[(String, (String, Int))]
//val grouped = kv2.groupByKey()            // grouped is RDD[(String, Iterable[(String, Int)])]
//grouped.foreach(println)


      // Total number of detections so far
//      val stream_detections = joined_stream.filter{case (x,y) => y.toDouble > 1.0}

//      stream_detections.print()

    	  		     	          
//                                           .updateStateByKey[int](updateFunction _)

					         	  	       			        


//     	              .map{case (topic, count) => (count, topic)}
//            	      .transform(_.sortByKey(false))


      
//      def updateFunction(newValues: Seq[Int], runningCount: Option[Int]): Option[Int] = {
//          val newCount = ...  
//	   Some(newCount)
//      }







      /*     

     */

